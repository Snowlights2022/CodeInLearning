function isHexaDigit(digit) {
   var hexVals = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
                           "A", "B", "C", "D", "E", "F", "a", "b", "c", "d", "e", "f");
   var len = hexVals.length;
   var i = 0;
   var ret = false;

   for ( i = 0; i < len; i++ )
      if ( digit == hexVals[i] ) break;

   if ( i < len )
      ret = true;

   return ret;
}

function isNumber( val )
{
	var len = val.length;
	var sign = 0;
	
	for( var i = 0; i < len; ++i )
	{
		if( ( val.charAt(i) == '-' ) && ( sign == 0 ) )
		{
			sign = 1;
			continue;
		}
		
		if( ( val.charAt(i) > '9' ) 
		    || ( val.charAt(i) < '0' ) )
		{
			return false;
		}
		sign = 1;
	}
	
	return true;
}

function isValidKey(val, size) {
   var ret = false;
   var len = val.length;
   var dbSize = size * 2;

   if ( len == size )
      ret = true;
   else if ( len == dbSize ) {
      for ( i = 0; i < dbSize; i++ )
         if ( isHexaDigit(val.charAt(i)) == false )
            break;
      if ( i == dbSize )
         ret = true;
   } else
      ret = false;

   return ret;
}


function isValidHexKey(val, size) {
   var ret = false;
   if (val.length == size) {
      for ( i = 0; i < val.length; i++ ) {
         if ( isHexaDigit(val.charAt(i)) == false ) {
            break;
         }
      }
      if ( i == val.length ) {
         ret = true;
      }
   }

   return ret;
}


function isNameUnsafe(compareChar) {
   var unsafeString = "\"<>%\\^[]`\+\$\,='#&@.: \t";
	
   if ( unsafeString.indexOf(compareChar) == -1 && compareChar.charCodeAt(0) > 32
        && compareChar.charCodeAt(0) < 123 )
      return false; // found no unsafe chars, return false
   else
      return true;
}   

// Check if a name valid
function isValidName(name) {
   var i = 0;	
   
   for ( i = 0; i < name.length; i++ ) {
      if ( isNameUnsafe(name.charAt(i)) == true )
         return false;
   }

   return true;
}

// same as is isNameUnsafe but allow spaces
function isCharUnsafe(compareChar) {
   var unsafeString = "\"<>%\\^[]`\+\$\,='#&@.:\t";
	
   if ( unsafeString.indexOf(compareChar) == -1 && compareChar.charCodeAt(0) >= 32
        && compareChar.charCodeAt(0) < 123 )
      return false; // found no unsafe chars, return false
   else
      return true;
}   

function isValidNameWSpace(name) {
   var i = 0;	
   
   for ( i = 0; i < name.length; i++ ) {
      if ( isCharUnsafe(name.charAt(i)) == true )
         return false;
   }

   return true;
}

function isSameSubNet(lan1Ip, lan1Mask, lan2Ip, lan2Mask) {

   var count = 0;
   
   lan1a = lan1Ip.split('.');
   lan1m = lan1Mask.split('.');
   lan2a = lan2Ip.split('.');
   lan2m = lan2Mask.split('.');

   for (i = 0; i < 4; i++) {
      l1a_n = parseInt(lan1a[i]);
      l1m_n = parseInt(lan1m[i]);
      l2a_n = parseInt(lan2a[i]);
      l2m_n = parseInt(lan2m[i]);
      if ((l1a_n & l1m_n) == (l2a_n & l2m_n))
         count++;
   }
   if (count == 4)
      return true;
   else
      return false;
}


function isValidIpAddress(address) {

    if(address.indexOf("<script>") != -1 || address.indexOf("</script>") != -1)
    {
       //当字符串包含<script>或</script>
       return false;
    }
	
   ipParts = address.split('/');
   if (ipParts.length > 2) return false;
   if (ipParts.length == 2) {
      num = parseInt(ipParts[1]);
      if (num <= 0 || num > 32)
         return false;
   }
   if (ipParts[0] == '0.0.0.0' ||
       ipParts[0] == '255.255.255.255' )
      return false;

   addrParts = ipParts[0].split('.');
   if ( addrParts.length != 4 ) return false;
        
   for (i = 0; i < 4; i++) {
      if (isNaN(addrParts[i]) || addrParts[i] =="")
         return false;
      num = parseInt(addrParts[i]);
      if ( num < 0 || num > 255 )
         return false;
   }
   return true;
}

function isValidIpAddress6(address) {

    if(address.indexOf("<script>") != -1 || address.indexOf("</script>") != -1)
    {
       //当字符串包含<script>或</script>
       return false;
    }
	
   ipParts = address.split('/');
   if (ipParts.length > 2) return false;
   if (ipParts.length == 2) {
      num = parseInt(ipParts[1]);
      if (num <= 0 || num > 128)
         return false;
   }

   addrParts = ipParts[0].split(':');
   if (addrParts.length < 3 || addrParts.length > 8)
      return false;
   for (i = 0; i < addrParts.length; i++) {
      if ( addrParts[i] != "" )
         num = parseInt(addrParts[i], 16);
      if ( i == 0 ) {
//         if ( (num & 0xf000) == 0xf000 )
//            return false;	//can not be link-local, site-local or multicast address
      }
      else if ( (i + 1) == addrParts.length) {
         if ( num == 0 || num == 1)
            return false;	//can not be unspecified or loopback address
      }
      if ( num != 0 )
         break;
   }
   return true;
}

function isValidIpAddress_2(address) {
   var i = 0;

   if (isValidIpAddress6_2(address) == true)
      return true;

   if ( address == '0.0.0.0' ||
        address == '127.0.0.1'||
        address == '255.255.255.255' )
      return false;

   addrParts = address.split('.');
   if ( addrParts.length != 4 ) return false;
   for (i = 0; i < 4; i++) {
      if (isNaN(addrParts[i]) || addrParts[i] =="")
         return false;
      num = parseInt(addrParts[i], 10);
      if ( isNaN(num)|| num < 0 || num > 255 )
         return false;
   }

   if (parseInt(addrParts[0], 10) < 1 || parseInt(addrParts[0], 10) > 223 )
   	return false;

   if (parseInt(addrParts[3], 10) < 1 ||  parseInt(addrParts[3], 10) >= 255 )
   	return false;
   
   return true;
}

 function isValidIpAddress6_2(address) {
   var i;
   ipParts = address.split('/');
   if (ipParts.length != 2) return false;
   if (ipParts.length == 2) {
	  if ((ipParts[1] == "")||(!isNumber(ipParts[1])))
	  {
		return false;
	  }
      num = parseInt(ipParts[1]);
      if ((num <= 16 || num > 128)||(num % 16 != 0))
         return false;
   }

   Parts = ipParts[0].split('::');
   if ((Parts.length != 2) || (Parts[1] != ""))
      return false;
   addrParts = ipParts[0].split(':');
   if (addrParts.length < 3 || addrParts.length > 8)
      return false;
   for (i = 0; i < addrParts.length; i++) 
   {
      if (addrParts[i] != "")
	  {
         if(!isValidHexKey(addrParts[i],addrParts[i].length))
		 {
			return false;
		 }
		 else
		 {
			if ((parseInt(addrParts[i], 16) < 0) || (parseInt(addrParts[i], 16) > 65535))
			{
				return false;
			}
		 }
	  }
   }
   return true;
}

 function isValidDNSAddress6(address) {
		var i;
		var flag;
		flag = true;
		if (address.indexOf('/') != -1)
		{
			return false;
		}

		if (address.indexOf('::') != -1)
		{
			Parts = address.split('::');
			flag = false;
			if ((Parts.length != 2) || (Parts[1] == ""))
				return false;
		}

		addrParts = address.split(':');
		if (addrParts.length < 3 || addrParts.length > 8)
		  return false;
		  
		if (flag)
		{
			if (addrParts.length != 8)
				return false;
		}
		
		for (i = 0; i < addrParts.length; i++) 
		{
	
			  if (addrParts[i] != "")
			  {
				 if(!isValidHexKey(addrParts[i],addrParts[i].length))
				 {
					return false;
				 }
				 else
				 {
					if ((parseInt(addrParts[i], 16) < 0) || (parseInt(addrParts[i], 16) > 65535))
					{
						return false;
					}
				 }
			  }
			  else
			  {
				if (flag)
				{
					return false;
				}
			  }
		}
   return true;
}

function isValidPrefixLength(prefixLen) {
   var num;

   num = parseInt(prefixLen);
   if (num <= 0 || num > 128)
      return false;
   return true;
}

function areSamePrefix(addr1, addr2) {
   var i, j;
   var a = [0, 0, 0, 0, 0, 0, 0, 0];
   var b = [0, 0, 0, 0, 0, 0, 0, 0];

   addr1Parts = addr1.split(':');
   if (addr1Parts.length < 3 || addr1Parts.length > 8)
      return false;
   addr2Parts = addr2.split(':');
   if (addr2Parts.length < 3 || addr2Parts.length > 8)
      return false;
   j = 0;
   for (i = 0; i < addr1Parts.length; i++) {
      if ( addr1Parts[i] == "" ) {
		 if ((i != 0) && (i+1 != addr1Parts.length)) {
			j = j + (8 - addr1Parts.length + 1);
		 }
		 else {
		    j++;
		 }
	  }
	  else {
         a[j] = parseInt(addr1Parts[i], 16);
		 j++;
	  }
   }
   j = 0;
   for (i = 0; i < addr2Parts.length; i++) {
      if ( addr2Parts[i] == "" ) {
		 if ((i != 0) && (i+1 != addr2Parts.length)) {
			j = j + (8 - addr2Parts.length + 1);
		 }
		 else {
		    j++;
		 }
	  }
	  else {
         b[j] = parseInt(addr2Parts[i], 16);
		 j++;
	  }
   }
   //only compare 64 bit prefix
   for (i = 0; i < 4; i++) {
      if (a[i] != b[i]) {
	     return false;
	  }
   }
   return true;
}

function getLeftMostZeroBitPos(num) {
   var i = 0;
   var numArr = [128, 64, 32, 16, 8, 4, 2, 1];

   for ( i = 0; i < numArr.length; i++ )
      if ( (num & numArr[i]) == 0 )
         return i;

   return numArr.length;
}

function getRightMostOneBitPos(num) {
   var i = 0;
   var numArr = [1, 2, 4, 8, 16, 32, 64, 128];

   for ( i = 0; i < numArr.length; i++ )
      if ( ((num & numArr[i]) >> i) == 1 )
         return (numArr.length - i - 1);

   return -1;
}

function isValidSubnetMask(mask) {
   var i = 0, num = 0;
   var zeroBitPos = 0, oneBitPos = 0;
   var zeroBitExisted = false;

   if ( mask == '0.0.0.0' )
      return false;

   maskParts = mask.split('.');
   if ( maskParts.length != 4 ) return false;

   for (i = 0; i < 4; i++) {
      if ( isNaN(maskParts[i]) == true )
         return false;
      num = parseInt(maskParts[i]);
      if ( num < 0 || num > 255 )
         return false;
      if ( zeroBitExisted == true && num != 0 )
         return false;
      zeroBitPos = getLeftMostZeroBitPos(num);
      oneBitPos = getRightMostOneBitPos(num);
      if ( zeroBitPos < oneBitPos )
         return false;
      if ( zeroBitPos < 8 )
         zeroBitExisted = true;
   }

   return true;
}

function isValidPort(port) {
   var fromport = 0;
   var toport = 100;

	port = port.toString();
   portrange = port.split(':');
   if ( portrange.length < 1 || portrange.length > 2 ) {
       return false;
   }
   if ( isNaN(portrange[0]) )
       return false;
   fromport = parseInt(portrange[0]);
   
   if ( portrange.length > 1 ) {
       if ( isNaN(portrange[1]) )
          return false;
       toport = parseInt(portrange[1]);
       if ( toport <= fromport )
           return false;      
   }
   
   if ( fromport < 1 || fromport > 65535 || toport < 1 || toport > 65535 )
       return false;
   
   return true;
}

function isValidNatPort(port) {
   var fromport = 0;
   var toport = 100;

   portrange = port.split('-');
   if ( portrange.length < 1 || portrange.length > 2 ) {
       return false;
   }
   if ( isNaN(portrange[0]) )
       return false;
   fromport = parseInt(portrange[0]);

   if ( portrange.length > 1 ) {
       if ( isNaN(portrange[1]) )
          return false;
       toport = parseInt(portrange[1]);
       if ( toport <= fromport )
           return false;
   }

   if ( fromport < 1 || fromport > 65535 || toport < 1 || toport > 65535 )
       return false;

   return true;
}

function isValidMacAddress(address) {
   var c = '';
   var num = 0;
   var i = 0, j = 0;
   var zeros = 0;

   addrParts = address.split(':');
   if ( addrParts.length != 6 ) return false;

   for (i = 0; i < 6; i++) {
      if ( addrParts[i] == '' )
         return false;
      for ( j = 0; j < addrParts[i].length; j++ ) {
         c = addrParts[i].toLowerCase().charAt(j);
         if ( (c >= '0' && c <= '9') ||
              (c >= 'a' && c <= 'f') )
            continue;
         else
            return false;
      }

      num = parseInt(addrParts[i], 16);
      if ( num == NaN || num < 0 || num > 255 )
         return false;
      if ( num == 0 )
         zeros++;
   }
   if (zeros == 6)
      return false;
      
   if ( parseInt(addrParts[0], 16) & 1 )	  
      return false;

   return true;
}

function isValidMacMask(mask) {
   var c = '';
   var num = 0;
   var i = 0, j = 0;
   var zeros = 0;
   var zeroBitPos = 0, oneBitPos = 0;
   var zeroBitExisted = false;

   maskParts = mask.split(':');
   if ( maskParts.length != 6 ) return false;

   for (i = 0; i < 6; i++) {
      if ( maskParts[i] == '' )
         return false;
      for ( j = 0; j < maskParts[i].length; j++ ) {
         c = maskParts[i].toLowerCase().charAt(j);
         if ( (c >= '0' && c <= '9') ||
              (c >= 'a' && c <= 'f') )
            continue;
         else
            return false;
      }

      num = parseInt(maskParts[i], 16);
      if ( num == NaN || num < 0 || num > 255 )
         return false;
      if ( zeroBitExisted == true && num != 0 )
         return false;
      if ( num == 0 )
         zeros++;
      zeroBitPos = getLeftMostZeroBitPos(num);
      oneBitPos = getRightMostOneBitPos(num);
      if ( zeroBitPos < oneBitPos )
         return false;
      if ( zeroBitPos < 8 )
         zeroBitExisted = true;
   }
   if (zeros == 6)
      return false;

   return true;
}

var hexVals = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
              "A", "B", "C", "D", "E", "F");
var unsafeString = "\"<>%\\^[]`\+\$\,'#&";
// deleted these chars from the include list ";", "/", "?", ":", "@", "=", "&" and #
// so that we could analyze actual URLs

function isUnsafe(compareChar)
// this function checks to see if a char is URL unsafe.
// Returns bool result. True = unsafe, False = safe
{
   if ( unsafeString.indexOf(compareChar) == -1 && compareChar.charCodeAt(0) > 32
        && compareChar.charCodeAt(0) < 123 )
      return false; // found no unsafe chars, return false
   else
      return true;
}

function decToHex(num, radix)
// part of the hex-ifying functionality
{
   var hexString = "";
   while ( num >= radix ) {
      temp = num % radix;
      num = Math.floor(num / radix);
      hexString += hexVals[temp];
   }
   hexString += hexVals[num];
   return reversal(hexString);
}

function reversal(s)
// part of the hex-ifying functionality
{
   var len = s.length;
   var trans = "";
   for (i = 0; i < len; i++)
      trans = trans + s.substring(len-i-1, len-i);
   s = trans;
   return s;
}

function convert(val)
// this converts a given char to url hex form
{
   return  "%" + decToHex(val.charCodeAt(0), 16);
}


function encodeUrl(val)
{
   var len     = val.length;
   var i       = 0;
   var newStr  = "";
   var original = val;

   for ( i = 0; i < len; i++ ) {
      if ( val.substring(i,i+1).charCodeAt(0) < 255 ) {
         // hack to eliminate the rest of unicode from this
         if (isUnsafe(val.substring(i,i+1)) == false)
            newStr = newStr + val.substring(i,i+1);
         else
            newStr = newStr + convert(val.substring(i,i+1));
      } else {
         // woopsie! restore.
         alert ("Found a non-ISO-8859-1 character at position: " + (i+1) + ",\nPlease eliminate before continuing.");
         newStr = original;
         // short-circuit the loop and exit
         i = len;
      }
   }

   return newStr;
}
function encodeUrlAH(val)
{
   var len     = val.length;
   var i       = 0;
   var newStr  = "";
   var original = val;

   for ( i = 0; i < len; i++ ) {
      if ( val.substring(i,i+1).charCodeAt(0) < 255 ) {
         // hack to eliminate the rest of unicode from this
         if (isUnsafe(val.substring(i,i+1)) == false)
            newStr = newStr + val.substring(i,i+1);
         else
            newStr = newStr + convert(val.substring(i,i+1));
      } else {
         // woopsie! restore.
         //alert ("Found a non-ISO-8859-1 character at position: " + (i+1) + ",\nPlease eliminate before continuing.");
         newStr = original;
         // short-circuit the loop and exit
         i = len;
      }
   }

   return newStr;
}


var markStrChars = "\"'";

// Checks to see if a char is used to mark begining and ending of string.
// Returns bool result. True = special, False = not special
function isMarkStrChar(compareChar)
{
   if ( markStrChars.indexOf(compareChar) == -1 )
      return false; // found no marked string chars, return false
   else
      return true;
}

// use backslash in front one of the escape codes to process
// marked string characters.
// Returns new process string
function processMarkStrChars(str) {
   var i = 0;
   var retStr = '';

   for ( i = 0; i < str.length; i++ ) {
      if ( isMarkStrChar(str.charAt(i)) == true )
         retStr += '\\';
      retStr += str.charAt(i);
   }

   return retStr;
}

// Web page manipulation functions

function showhide(element, sh)
{
    var status;
    if (sh == 1) {
        status = "block";
    }
    else {
        status = "none";
    }
    
	if (document.getElementById)
	{
		// standard
		document.getElementById(element).style.display = status;
	}
	else if (document.all)
	{
		// old IE
		document.all[element].style.display = status;
	}
	else if (document.layers)
	{
		// Netscape 4
		document.layers[element].display = status;
	}
}

// Load / submit functions

function getSelect(item)
{
	var idx;
	if (item.options.length > 0) {
	    idx = item.selectedIndex;
	    return item.options[idx].value;
	}
	else {
		return '';
    }
}

function setSelect(item, value)
{
	for (i=0; i<item.options.length; i++) {
        if (item.options[i].value == value) {
        	item.selectedIndex = i;
        	break;
        }
    }
}

function setCheck(item, value)
{
    if ( value == '1' ) {
         item.checked = true;
    } else {
         item.checked = false;
    }
}

function setDisable(item, value)
{
    if ( value == 1 || value == '1' ) {
         item.disabled = true;
    } else {
         item.disabled = false;
    }     
}

function submitText(item)
{
	return '&' + item.name + '=' + item.value;
}

function submitSelect(item)
{
	return '&' + item.name + '=' + getSelect(item);
}


function submitCheck(item)
{
	var val;
	if (item.checked == true) {
		val = 1;
	} 
	else {
		val = 0;
	}
	return '&' + item.name + '=' + val;
}

function isHexaDigit(digit) {
   var hexVals = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
                           "A", "B", "C", "D", "E", "F", "a", "b", "c", "d", "e", "f");
   var len = hexVals.length;
   var i = 0;
   var ret = false;

   for ( i = 0; i < len; i++ )
      if ( digit == hexVals[i] ) break;

   if ( i < len )
      ret = true;

   return ret;
}

function isInValidDhcpPool(lan1StartIp, lan1EndIp,lan2StartIp, lan2EndIp )
{
   lan1addrEnd = lan1EndIp.split('.');
   lan1addrStart = lan1StartIp.split('.');
   lan2addrEnd = lan2EndIp.split('.');
   lan2addrStart = lan2StartIp.split('.');
   E1 = parseInt(lan1addrEnd[3]) + 1;
   S1 = parseInt(lan1addrStart[3]) + 1;
   E2 = parseInt(lan2addrEnd[3]) + 1;
   S2 = parseInt(lan2addrStart[3]) + 1;

   if (E1 > S2 && E1 < E2)
       return false;
   if (S1 > S2 && S1 < E2)
       return false;
   if (S2 > S1 && S2 < E1)
       return false;
   if (E2 > S1 && E2 < E1)
       return false;
   return true;
}

function isValidIpAddress_dhcpDevice(address){
   var i = 0;

   if ( address == '255.255.255.255' )
      return false;

   addrParts = address.split('.');
   if ( addrParts.length != 4 ) return false;
   for (i = 0; i < 4; i++) {
      if (isNaN(addrParts[i]) || addrParts[i] =="")
         return false;
      num = parseInt(addrParts[i]);
      if ( num < 0 || num > 255 )
         return false;
   }
   return true;
}

function isValidDigit(digit) {
   var hexVals = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");
   var len = hexVals.length;
   var i = 0;
   var ret = false;

   for ( i = 0; i < len; i++ )
      if ( digit == hexVals[i] ) break;

   if ( i < len )
      ret = true;

   return ret;
}

function isValidServerPort(val){
   var ret = false;
   var max = 65535;
   var min = 0;
   var i = 0;

   if((val.length > 1) &&(val.charAt(0) == '0'))
   {
			return false;
   }

   for(i;i<val.length;i++)
   {
      if ( isValidDigit(val.charAt(i)) == false )
        break;
   }
   if ( i == val.length )
   {
       ret = true;
   }

   if(ret == true)
   {
   	   if (( val <= max) &&( val >= min))
	         ret = true;
	     else
	        ret = false;
   }

   return ret;
}

function isValidValue(val)
{
   var ret = false;
   var min = 0;
   var i=0;

   if((val.length > 1) &&(val.charAt(0) == '0'))
   {
			return false;
   }

   for(i;i<val.length;i++)
   {
      if ( isValidDigit(val.charAt(i)) == false )
        break;
   }
   if ( i == val.length )
   {
       ret = true;
   }

   if(ret == true)
   {
        if (val > min)
        {
            ret = true;
        }
        else
        {
            ret = false;
        }
   }
   return ret;
}

function isSameSubNet(lan1Ip, lan1Mask, lan2Ip, lan2Mask) {

   var count = 0;

   lan1a = lan1Ip.split('.');
   lan1m = lan1Mask.split('.');
   lan2a = lan2Ip.split('.');
   lan2m = lan2Mask.split('.');

   for (i = 0; i < 4; i++) {
     var  l1a_n = parseInt(lan1a[i],10);
     var  l1m_n = parseInt(lan1m[i],10);
     var  l2a_n = parseInt(lan2a[i],10);
     var  l2m_n = parseInt(lan2m[i],10);
	 
      if ((l1a_n & l1m_n) == (l2a_n & l2m_n))
         count++;
   }
   if (count == 4)
      return true;
   else
      return false;
}

function IsNotDigit(fData)
{
     var i;

	 for(i = 0; i < fData.length; i++) 
	 {
		if (!(fData.charAt(i) >= '0' && fData.charAt(i) <= '9'))
			return true;
	 }
	
	 return false;
}

function isValidNetMask(address) {

   ipParts = address.split('/');
   if (ipParts.length > 2) return false;
   if (ipParts.length == 2) {
      num = parseInt(ipParts[1]);
      if (num <= 0 || num > 32)
         return false;
   }

   if (ipParts[0] == '0.0.0.0' ||
       ipParts[0] == '255.255.255.255' )
      return false;

   addrParts = ipParts[0].split('.');
   if ( addrParts.length != 4 ) return false;
   for (i = 0; i < 4; i++) {
      if (isNaN(addrParts[i]) || addrParts[i] =="")
         return false;
      num = parseInt(addrParts[i]);
      if ( num < 0 || num > 255 )
         return false;
   }
   return true;
}


function isValidIpAddress_dhcpDevice(address){
   var i = 0;

   if ( address == '255.255.255.255' )
      return false;

   addrParts = address.split('.');
   if ( addrParts.length != 4 ) return false;
   for (i = 0; i < 4; i++) {
      if (IsNotDigit(addrParts[i]) || addrParts[i] =="")
         return false;
      
      num = parseInt(addrParts[i]);
      if (i == 0 && num == 0)
      {
          return false;
      }
      if ( num < 0 || num >= 255 )
         return false;
   }
   if(parseInt(addrParts[3]) == 0)
   	return false;
   return true;
}

function isValidPrefixAddress(address) {
   var i = 0, num = 0;
   var space=0;
   addrParts = address.split(':');
   if (addrParts.length < 3 || addrParts.length > 8)
      return false;
   for (i = 0; i < addrParts.length; i++) {
      if ( addrParts[i] != "" && isValidHexKey(addrParts[i],addrParts[i].length) )
         num = parseInt(addrParts[i], 16);
	  else
	   {
		  space++;
		  if(space>1 && (i + 1) != addrParts.length)
		  return false;
		  continue;
	   }
      if ( i == 0 ) {
         if ( (num & 0xf000) == 0xf000 )
            return false;	
      }
      if ( num > 0xffff || num < 0 )
         return false;
   }
   return true;
}

/*Get row numbers from valueslsit whose delimiter is rowD*/
function numOfRow(valuelist, rowDelimiter){
	if(typeof(rowD) == 'undefined')
		rowD= '|';

	var numR = 0;
	if(valuelist != ''){
		if (rowD != ''){
			var tnodes = valuelist.split(rowD);
		}else{
			var tnodes = valuelist;
		}
		numR = tnodes.length - 2; // not include parameter name line/row
		return numR;
	}

	return numR;
}

/*Get column numbers from valueslsit whose row's delimiter is rowD and colum's delimiter is colD*/
function numOfCol(valuelist, rowD, colD){
	if(typeof(rowD) == 'undefined')
		rowD = '|';
	if(typeof(colD) == 'undefined')
		colD = '/';
	
	var numC = 0;
	if(valuelist != ''){
		if (rowD != ''){
			var tnodes = valuelist.split(rowD);
		}else{
			var tnodes = valuelist;
		}
		if (tnodes.length > 0){
			if (colD != ''){
				var tdata = tnodes[0].split(colD);// only need check row[0]'s column number
				numC = tdata.length - 1;
			}
		}
		return numC;
	}
	return numC;
}

function getParamNum( valuelist, colNum, rowD, colD ){
	var i;     
	if(valuelist != ''){
		if (rowD != ''){
			var tnodes = valuelist.split(rowD);
		}else{
			var tnodes = valuelist;
		}

		var row = numOfRow(valuelist, rowD);
		var names = tnodes[row].split(colD);
		for ( i = 0; i < names.length; i++ ){
			if ( names[i] == colNum ){
				return i;
			}
		}
	}
	return -1;
}

/*Get specific parameter value from valueslsit whose row's delimiter is rowD and colum's is colD and rowid is rowNum & colid is colNum */
function getValueFromList(valuelist, colNum, rowNum, rowD, colD){
	if(typeof(rowD) == 'undefined')
		rowD = '|';
	if(typeof(colD) == 'undefined')
		colD = '/';
	if(typeof(rowNum) == 'undefined')
		rowNum = 0;

	var n;
	if ( isNaN(colNum) ) 
		n = getParamNum(valuelist, colNum, rowD, colD);		
	else
		n = colNum;
      
	var mName = new Array();
	if(valuelist != '' && n != -1){
		if (rowD != ''){
			var tnodes = valuelist.split(rowD);
		}else{
			var tnodes = valuelist;
		}

		var tdata = tnodes[rowNum].split(colD);
		(tdata[n]) ? mName = tdata[n]: mName = '';
         
		return mName;
	}
	return mName;
}

/*Get colid is colNum's paramer values from valueslsit whose row's delimiter is rowD and colum's is colD */
function getColFromList(valuelist, colNum, rowD, colD){
	if(typeof(rowD) == 'undefined')
		rowD = '|';
	if(typeof(colD) == 'undefined')
		colD = '/';

	var n;
	if ( isNaN(colNum) ) 
		n = getParamNum(valuelist, colNum, rowD, colD);
	else
		n = colNum;

	var mName = new Array();
	if(valuelist != ''){
		if (rowD != ''){
			var tnodes = valuelist.split(rowD);
		}else{
			var tnodes = valuelist;
		}
		for ( i = 0; i < tnodes.length -1; i++ ){ 
			var tdata = tnodes[i].split(colD);
			(tdata[n]) ? mName[i] = tdata[n]: mName[i] = '';
		}
		return mName;
	}
	return mName;
}

function getIpMaskBit(mask) {
   var i = 0, num = 0;
   var oneBitPos = 0;
   
   if ( isValidSubnetMask(mask) == false)
	 return -1;

   maskParts = mask.split('.');
   for (i = 0; i < 4; i++) {
      num = parseInt(maskParts[i]);
      oneBitPos = getRightMostOneBitPos(num);
	if(oneBitPos < 7){
		return i*8 + oneBitPos + 1;
	}
   }
   return 32;
}

function markDscpToName(mark){
   var i;
   var dscpMarkDesc = new Array ('auto', 'default', 'AF13', 'AF12', 'AF11', 'CS1',
                           'AF23', 'AF22', 'F21', 'S2',
                           'AF33', 'AF32', 'AF31', 'CS3',
                           'AF43', 'AF42', 'AF41', 'CS4',
                           'EF', 'CS5', 'CS6', 'CS7', '');
   var dscpMarkValues = new Array(-2, 0x00, 0x38, 0x30, 0x28, 0x20,
                             0x58, 0x50, 0x48, 0x40,
                             0x78, 0x70, 0x68, 0x60,
                             0x98, 0x90, 0x88, 0x80,
                             0xB8, 0xA0, 0xC0, 0xE0);
   if(mark == -1)
   	return '';
   for (i = 0; dscpMarkDesc[i] != ''; i++)
   {
      if (mark == dscpMarkValues[i])
         return dscpMarkDesc[i];
   }
   return dscpMarkDesc[0];
}

 function String_Replace(expression, find, replacewith, start) {
  var index = expression.indexOf(find, start);
  if (index == -1)
   return expression;

  var findLen = find.length;
  var newexp = "";
  newexp = expression.substring(0, index)+(replacewith)+(expression.substring(index+findLen));

  return String_Replace(newexp, find, replacewith, index+1+findLen);
 }
 

function SsidisIncludeInvalidChar(val) {
   var len = val.length;

   for ( i = 0; i < len; i++ )
   {
      if( val.charAt(i) == '&' )
      {
         return false;
      }
   }

   return true;
}

function isValidNameString( val ){
	var len = val.length; 
	
	for ( i = 0; i < len; i++ )    
	{        
	   if ( ( val.charAt(i) > '~' ) || ( val.charAt(i) < '!' ) )        
	   {            
	     return false;        
	   }    
	}    
	
	return true;
}

function isValidNameStringAH( val ){
   var len = val.length;

   for ( i = 0; i < len; i++ )
   {
      if ((' '<= val.charAt(i) && val.charAt(i)<'!'))
      {
         return false;
      }
   }

   return true;
}

function isPppNameUnsafe(compareChar) {
   var unsafeString = "\"\\`\,=' \t";
	
   if ( unsafeString.indexOf(compareChar) == -1 && compareChar.charCodeAt(0) > 32
        && compareChar.charCodeAt(0) < 123 )
      return false; // found no unsafe chars, return false
   else
      return true;
}   

// Check if a ppp name or password valid
function isValidPppName(pppname) {
   var i = 0;	
   
   for ( i = 0; i < pppname.length; i++ ) {
      if ( isPppNameUnsafe(pppname.charAt(i)) == true )
         return false;
   }

   return true;
}

function Resizeiframe()
{
  getElById('mainFrameid').style.height=531;
  var mainbody = mainFrame.document.body.scrollHeight;
  var trmainbody = getElById('trmain').clientHeight;
  var mainbodyoffset = getElById('mainFrameid').offsetHeight;
  var end = mainbody;
  if (end < (trmainbody-31))
    end = trmainbody-31;
  getElById('mainFrameid').style.height=end;  //must be id
}

function isValidValue2forH248(min,max,val)
{
        var ret = false;

        if(((val.length > 1) &&((val.charAt(0) == ' ')||(val.charAt(0) == '0')))
                ||((val.length == 1)&&(val.charAt(0) == ' ')) || (val.length == 0))
        {
        return false;
        }

        if ((val >= min)&&(val <=max))
        {
                ret = true;
        }
        else
        {
                ret = false;
        }
        return ret;
}

function isValidValue2(min,max,val)
{
        var ret = false;
        var i=0;

        if(((val.length > 1) &&(val.charAt(0) == '0'))||(val.length==0))
        {
                        return false;
        }

        for(i;i<val.length;i++)
        {
                if ( isValidDigit(val.charAt(i)) == false )
                break;
        }
        if ( i == val.length )
        {
                ret = true;
        }

        if(ret == true)
        {
                        if (( val <= max) &&( val >= min))
                        ret = true;
                else
                        ret = false;
        }
        return ret;
}
function isValueNull(val1,val2)
{
        if((val1.length == 0)&&(val2.length == 0))
        return true;
        else
        return false;
}
function isValidMGCAddress(len,address)
{
        var hexVals = new Array("0","1","2","3","4","5","6","7","8","9",".");
        var le = hexVals.length;
        var i,j;
        var ret = true;
        for(j = 0;j < address.length; j++)
        {
                for ( i = 0; i < le; i++ )
                        if ( address.charAt(j) == hexVals[i] ) break;

                if(i == le)
                {
                        ret = false;
                }
        }

        if(ret == false)
        {
                if(address.length <= len)
                        return true;
                else
                {
                        return false;
                }
        }
        else
        {
                if ( address == '255.255.255.255' )
                {
                        return false;
                }

                addrPartss = address.split('.');
                if ( addrPartss.length != 4 )
                        return false;
                for (i = 0; i < 4; i++)
                {
                        if (isNaN(addrPartss[i]) || addrPartss[i] =="")
                        {
                                return false;
                        }
                        num = parseInt(addrPartss[i]);
                        if ( num < 0 || num > 255 )
                        {
                                return false;
                        }
                }
                return true;
        }
}
function isValidClientPortforH248(min, max, val)
{
        var ret = false;
        if(((val.length > 1) &&((val.charAt(0) == ' ')||(val.charAt(0) == '0')))
                ||((val.length == 1)&&(val.charAt(0) == ' '))||(val.length == 0))
        {
                return false;
        }

        if ((val <= max) && (val >= min))
        {
                ret = true;
        }
        else{
                ret = false;
        }
        return ret;


}
function isValidServerPortforH248(val){
        var ret = false;
        var max = 65535;
        var min = 0;

        if(((val.length > 1) &&((val.charAt(0) == ' ')||(val.charAt(0) == '0')))
                ||((val.length == 1)&&(val.charAt(0) == ' '))||(val.length == 0))
        {
        return false;
        }

        if (( val < max) &&( val > min))        /*1 to 65534, Hw xml need*/
                {
                ret = true;
        }
        else{
                ret = false;
        }
        return ret;
}
function isValidLenforH248(max,val)
{
        if((val.length < max)&&(val.length > 0))
        return true;
        else
        return false;
}
function isValidLenforH248TermName(max,val)
{
        if((val.length < max)&&(val.length >= 0))
        {
                /* add by xiaoqp  on 20110421 for the add correct  prefix TerminationID */
            if (val.indexOf(" ") != -1)
            {
                        return false;
            }
                for (var i = 0; i < val.length; i++)
                {
                        if((val.charAt(i) >= 'a' && val.charAt(i) <= 'z') 
                           || (val.charAt(i) >= 'A' && val.charAt(i) <= 'Z') 
                           || (val.charAt(i) >= '0' && val.charAt(i) <= '9'))
                        {
                                continue;
                        }
                        else if(val.charAt(i) == '*' || val.charAt(i) == '@' 
                                || val.charAt(i) == '_' || val.charAt(i) == '-'
                                        || val.charAt(i) == '.' || val.charAt(i) == '/'
                                        || val.charAt(i) == '$')
                        {
                            continue;
                        }
                        else
                        {
                                return false
                        }
                }
                
            return true
                /* add by xiaoqp end */
        }
        else
        return false;
}
function isValidforH248RtpName(max, val)
{
        if((val.length < max)&&(val.length > 0))
        {
            if (val.indexOf(" ") != -1)
            {
                        return false;
            }
                /* add by xiaoqp  on 20110421 for the add correct  prefix TerminationID */
                for (var i = 0; i < val.length; i++)
                {
                        if((val.charAt(i) >= 'a' && val.charAt(i) <= 'z') 
                           || (val.charAt(i) >= 'A' && val.charAt(i) <= 'Z') 
                           || (val.charAt(i) >= '0' && val.charAt(i) <= '9'))
                        {
                                continue;
                        }
                        else if(val.charAt(i) == '*' || val.charAt(i) == '@' 
                                || val.charAt(i) == '_' || val.charAt(i) == '-'
                                        || val.charAt(i) == '.' || val.charAt(i) == '/'
                                        || val.charAt(i) == '$')
                        {
                            continue;
                        }
                        else
                        {
                                return false
                        }
                }

                return true
                /* add by xiaoqp end */
        }
        else
        {
                return false;
        }
}
function isValidValue2(min,max,val)
{
        var ret = false;
        var i=0;

        if(((val.length > 1) &&(val.charAt(0) == '0'))||(val.length==0))
        {
                        return false;
        }

        for(i;i<val.length;i++)
        {
                if ( isValidDigit(val.charAt(i)) == false )
                break;
        }
        if ( i == val.length )
        {
                ret = true;
        }

        if(ret == true)
        {
                        if (( val <= max) &&( val >= min))
                        ret = true;
                else
                        ret = false;
        }
        return ret;
}

function str_repeat (input, multiplier) {
  // *     example 1: str_repeat('-=', 10);
  // *     returns 1: '-=-=-=-=-=-=-=-=-=-='

  var y = '';
  while (true) {
    if (multiplier & 1) {
      y += input;
    }
    multiplier >>= 1;
    if (multiplier) {
      input += input;
    }
    else {
      break;
    }
  }
  return y;
}

//获取radio的选中的值
function getRadioValue(RadioName){
    var obj;    
    obj=document.getElementsByName(RadioName);
    if(obj!=null){
        var i;
        for(i=0;i<obj.length;i++){
            if(obj[i].checked){
                return obj[i].value;            
            }
        }
    }
    return null;
}
//判断逻辑ID的字符是否为:a-z,A-Z,0-9
function IsString(){
   var str =document.getElementById('LoidId_text').value.trim();
   if(str.length!=0){
      reg= /^[a-zA-Z0-9]([\w\W]{0,21})[a-zA-Z0-9]$/;
      if(!reg.test(str)){
         alert("对不起，您输入的逻辑ID开始字符和结束字符只能为大小写字母和数字，长度小于24个字符");
      }
   }
   else{
      alert("对不起，您输入的逻辑ID不能为空");
   }
}
function PwdIsString(){
   var str =document.getElementById('Pwd_password').value.trim();
   if(str.length!=0){
      if(undefined != softVer ){
          switch(softVer){
              case "FuJian":
                reg= /^[a-zA-Z0-9]([\w\W]{0,18})[a-zA-Z0-9]$/;
                if(!reg.test(str)){
                    alert("对不起，您输入的逻辑密码开始字符和结束字符只能为大小写字母和数字，长度小于20个字符");
                }                
              break;
              default:
                reg= /^[a-zA-Z0-9]([\w\W]{0,10})[a-zA-Z0-9]$/;
                if(!reg.test(str)){
                    alert("对不起，您输入的逻辑密码开始字符和结束字符只能为大小写字母和数字，长度小于12个字符");
                }              
              break;
          }
      }else{
        reg= /^[a-zA-Z0-9]([\w\W]{0,10})[a-zA-Z0-9]$/;
        if(!reg.test(str)){
            alert("对不起，您输入的逻辑密码开始字符和结束字符只能为大小写字母和数字，长度小于12个字符");
        }
      }
   }
}

function changeType(obj,connId){
    obj.value = "";
    obj.type = "password";
   passChangeflag = connId;
}
function focuspassinput(obj){
   obj.value = "";
   focuspassinputflag=1;//add by wh 2019.6.4
}
function isInvalidStr(input_str){

    if(input_str.indexOf("<script>") != -1 || input_str.indexOf("</script>") != -1)
    {
       //当字符串包含<script>或</script>
       return true;
    }
    else
    {
       return false;
    }
}
function changeTypeuser(){
   if(document.getElementById("NN_wan_change").style.position == "inherit" || document.getElementById("NN_wan_change").style.position == ""){
      document.getElementById("NN_wan_change").style.position="relative";
   }
   else{
      document.getElementById("NN_wan_change").style.position="inherit";
   }
}
